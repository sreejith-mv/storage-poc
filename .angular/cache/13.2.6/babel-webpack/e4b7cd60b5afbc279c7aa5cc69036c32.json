{"ast":null,"code":"import _asyncToGenerator from \"/Users/sreejith/Pfizer_POC/StoragePOC/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport LocalForage from 'localforage';\n/** @hidden */\n\nexport const Drivers = {\n  SecureStorage: 'ionicSecureStorage',\n  IndexedDB: LocalForage.INDEXEDDB,\n  LocalStorage: LocalForage.LOCALSTORAGE\n};\nconst defaultConfig = {\n  name: '_ionicstorage',\n  storeName: '_ionickv',\n  dbKey: '_ionickey',\n  driverOrder: [Drivers.SecureStorage, Drivers.IndexedDB, Drivers.LocalStorage]\n};\nexport class Storage {\n  /**\n   * Create a new Storage instance using the order of drivers and any additional config\n   * options to pass to LocalForage.\n   *\n   * Possible default driverOrder options are: ['indexeddb', 'localstorage'] and the\n   * default is that exact ordering.\n   *\n   * When using Ionic Secure Storage (enterprise only), use ['ionicSecureStorage', 'indexeddb', 'localstorage'] to ensure\n   * Secure Storage is used when available, or fall back to IndexedDB or LocalStorage on the web.\n   */\n  constructor(config = defaultConfig) {\n    this._db = null;\n    this._secureStorageDriver = null;\n    const actualConfig = Object.assign({}, defaultConfig, config || {});\n    this._config = actualConfig;\n  }\n\n  create() {\n    var _this = this;\n\n    return _asyncToGenerator(function* () {\n      const db = LocalForage.createInstance(_this._config);\n      _this._db = db;\n      yield db.setDriver(_this._config.driverOrder || []);\n      return _this;\n    })();\n  }\n  /**\n   * Define a new Driver. Must be called before\n   * initializing the database. Example:\n   *\n   * await storage.defineDriver(myDriver);\n   * await storage.create();\n   */\n\n\n  defineDriver(driver) {\n    var _this2 = this;\n\n    return _asyncToGenerator(function* () {\n      if (driver._driver === Drivers.SecureStorage) {\n        _this2._secureStorageDriver = driver;\n      }\n\n      return LocalForage.defineDriver(driver);\n    })();\n  }\n  /**\n   * Get the name of the driver being used.\n   * @returns Name of the driver\n   */\n\n\n  get driver() {\n    var _a;\n\n    return ((_a = this._db) === null || _a === void 0 ? void 0 : _a.driver()) || null;\n  }\n\n  assertDb() {\n    if (!this._db) {\n      throw new Error('Database not created. Must call create() first');\n    }\n\n    return this._db;\n  }\n  /**\n   * Get the value associated with the given key.\n   * @param key the key to identify this value\n   * @returns Returns a promise with the value of the given key\n   */\n\n\n  get(key) {\n    const db = this.assertDb();\n    return db.getItem(key);\n  }\n  /**\n   * Set the value for the given key.\n   * @param key the key to identify this value\n   * @param value the value for this key\n   * @returns Returns a promise that resolves when the key and value are set\n   */\n\n\n  set(key, value) {\n    const db = this.assertDb();\n    return db.setItem(key, value);\n  }\n  /**\n   * Remove any value associated with this key.\n   * @param key the key to identify this value\n   * @returns Returns a promise that resolves when the value is removed\n   */\n\n\n  remove(key) {\n    const db = this.assertDb();\n    return db.removeItem(key);\n  }\n  /**\n   * Clear the entire key value store. WARNING: HOT!\n   * @returns Returns a promise that resolves when the store is cleared\n   */\n\n\n  clear() {\n    const db = this.assertDb();\n    return db.clear();\n  }\n  /**\n   * @returns Returns a promise that resolves with the number of keys stored.\n   */\n\n\n  length() {\n    const db = this.assertDb();\n    return db.length();\n  }\n  /**\n   * @returns Returns a promise that resolves with the keys in the store.\n   */\n\n\n  keys() {\n    const db = this.assertDb();\n    return db.keys();\n  }\n  /**\n   * Iterate through each key,value pair.\n   * @param iteratorCallback a callback of the form (value, key, iterationNumber)\n   * @returns Returns a promise that resolves when the iteration has finished.\n   */\n\n\n  forEach(iteratorCallback) {\n    const db = this.assertDb();\n    return db.iterate(iteratorCallback);\n  }\n\n  setEncryptionKey(key) {\n    var _a;\n\n    if (!this._secureStorageDriver) {\n      throw new Error('@ionic-enterprise/secure-storage not installed. Encryption support not available');\n    } else {\n      (_a = this._secureStorageDriver) === null || _a === void 0 ? void 0 : _a.setEncryptionKey(key);\n    }\n  }\n\n}","map":{"version":3,"sources":["/Users/sreejith/Pfizer_POC/StoragePOC/node_modules/@ionic/storage/dist/esm/index.js"],"names":["LocalForage","Drivers","SecureStorage","IndexedDB","INDEXEDDB","LocalStorage","LOCALSTORAGE","defaultConfig","name","storeName","dbKey","driverOrder","Storage","constructor","config","_db","_secureStorageDriver","actualConfig","Object","assign","_config","create","db","createInstance","setDriver","defineDriver","driver","_driver","_a","assertDb","Error","get","key","getItem","set","value","setItem","remove","removeItem","clear","length","keys","forEach","iteratorCallback","iterate","setEncryptionKey"],"mappings":"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","sourcesContent":["import LocalForage from 'localforage';\n/** @hidden */\nexport const Drivers = {\n    SecureStorage: 'ionicSecureStorage',\n    IndexedDB: LocalForage.INDEXEDDB,\n    LocalStorage: LocalForage.LOCALSTORAGE\n};\nconst defaultConfig = {\n    name: '_ionicstorage',\n    storeName: '_ionickv',\n    dbKey: '_ionickey',\n    driverOrder: [\n        Drivers.SecureStorage,\n        Drivers.IndexedDB,\n        Drivers.LocalStorage\n    ]\n};\nexport class Storage {\n    /**\n     * Create a new Storage instance using the order of drivers and any additional config\n     * options to pass to LocalForage.\n     *\n     * Possible default driverOrder options are: ['indexeddb', 'localstorage'] and the\n     * default is that exact ordering.\n     *\n     * When using Ionic Secure Storage (enterprise only), use ['ionicSecureStorage', 'indexeddb', 'localstorage'] to ensure\n     * Secure Storage is used when available, or fall back to IndexedDB or LocalStorage on the web.\n     */\n    constructor(config = defaultConfig) {\n        this._db = null;\n        this._secureStorageDriver = null;\n        const actualConfig = Object.assign({}, defaultConfig, config || {});\n        this._config = actualConfig;\n    }\n    async create() {\n        const db = LocalForage.createInstance(this._config);\n        this._db = db;\n        await db.setDriver(this._config.driverOrder || []);\n        return this;\n    }\n    /**\n     * Define a new Driver. Must be called before\n     * initializing the database. Example:\n     *\n     * await storage.defineDriver(myDriver);\n     * await storage.create();\n     */\n    async defineDriver(driver) {\n        if (driver._driver === Drivers.SecureStorage) {\n            this._secureStorageDriver = driver;\n        }\n        return LocalForage.defineDriver(driver);\n    }\n    /**\n     * Get the name of the driver being used.\n     * @returns Name of the driver\n     */\n    get driver() {\n        var _a;\n        return ((_a = this._db) === null || _a === void 0 ? void 0 : _a.driver()) || null;\n    }\n    assertDb() {\n        if (!this._db) {\n            throw new Error('Database not created. Must call create() first');\n        }\n        return this._db;\n    }\n    /**\n     * Get the value associated with the given key.\n     * @param key the key to identify this value\n     * @returns Returns a promise with the value of the given key\n     */\n    get(key) {\n        const db = this.assertDb();\n        return db.getItem(key);\n    }\n    /**\n     * Set the value for the given key.\n     * @param key the key to identify this value\n     * @param value the value for this key\n     * @returns Returns a promise that resolves when the key and value are set\n     */\n    set(key, value) {\n        const db = this.assertDb();\n        return db.setItem(key, value);\n    }\n    /**\n     * Remove any value associated with this key.\n     * @param key the key to identify this value\n     * @returns Returns a promise that resolves when the value is removed\n     */\n    remove(key) {\n        const db = this.assertDb();\n        return db.removeItem(key);\n    }\n    /**\n     * Clear the entire key value store. WARNING: HOT!\n     * @returns Returns a promise that resolves when the store is cleared\n     */\n    clear() {\n        const db = this.assertDb();\n        return db.clear();\n    }\n    /**\n     * @returns Returns a promise that resolves with the number of keys stored.\n     */\n    length() {\n        const db = this.assertDb();\n        return db.length();\n    }\n    /**\n     * @returns Returns a promise that resolves with the keys in the store.\n     */\n    keys() {\n        const db = this.assertDb();\n        return db.keys();\n    }\n    /**\n     * Iterate through each key,value pair.\n     * @param iteratorCallback a callback of the form (value, key, iterationNumber)\n     * @returns Returns a promise that resolves when the iteration has finished.\n     */\n    forEach(iteratorCallback) {\n        const db = this.assertDb();\n        return db.iterate(iteratorCallback);\n    }\n    setEncryptionKey(key) {\n        var _a;\n        if (!this._secureStorageDriver) {\n            throw new Error('@ionic-enterprise/secure-storage not installed. Encryption support not available');\n        }\n        else {\n            (_a = this._secureStorageDriver) === null || _a === void 0 ? void 0 : _a.setEncryptionKey(key);\n        }\n    }\n}\n"]},"metadata":{},"sourceType":"module"}